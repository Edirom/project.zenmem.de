    export default {
    
   (27983933,'<p><ac:image ac:height=\"80\"><ri:attachment ri:filename=\"AP 3.2.png\" /></ac:image></p><p>Verantwortlicher: <ac:link><ri:user ri:userkey=\"036a0e4f52f4d7b10153a3b0f6540003\" /></ac:link><br />Mitarbeiter: <ac:link><ri:user ri:userkey=\"036a0e4f4d328b24014d328d37cb0001\" /><ac:plain-text-link-body><![CDATA[BjÃ¶rn Senft]]></ac:plain-text-link-body></ac:link><br />Berater:<br />Personenmonate: ca. 10 PM</p><p>Digitale Musikeditionen stellen eine disruptive Technologie bzw. Innovation dar. Ihr gegen&uuml;ber sind die traditionellen analogen Editionen mit Limitationen (z. B. begrenzter Platz, Darstellungs- und Verkn&uuml;pfungsm&ouml;glichkeiten) verbunden, die die Bearbeitung gewisser Problemstellungen (z. B. Variantenvielfalt, Weiternutzung in anderen Kontexten) erschweren bis unm&ouml;glich machen. Wie durch Reverse und Requirements Engineering und die interdisziplin&auml;re Zusammenarbeit zwischen der Informatik, den Medienwissenschaften und der Musikwissenschaft festgestellt werden konnte, hebt das digitale Medium viele Limitationen auf, wodurch neue Problemstellungen in der Erstellung von Musikeditionen bearbeiten werden k&ouml;nnen. Dies stellt f&uuml;r den Softwareentwicklungsprozess eine Herausforderung dar. Ziel ist es nicht mehr nur vorhandene Arbeitsprozesse zu digitalisieren, zu unterst&uuml;tzen und zu optimieren, sondern neue zu identifizieren und zu gestalten. Dies kann allerdings nur in einer engen transdisziplin&auml;ren Zusammenarbeit mit den Methoden und dem Wissen der verschiedenen Disziplinen gelingen (vgl. dazu auch AP 1). Hierf&uuml;r bedarf es einer Weiterentwicklung und Evaluation der bisherigen Konzepte der Softwareentwicklung.</p><p><strong>Ergebnisse</strong>: Konzept f&uuml;r die Entwicklung von Software in DH-Kontexten, verbesserte Arbeitsprozesse</p><p><strong>Handlungsbedarf und Ergebnisse bis Klausurtagung (17.&ndash;18. Januar 2017):</strong></p><ac:task-list>\n<ac:task>\n<ac:task-id>1</ac:task-id>\n<ac:task-status>complete</ac:task-status>\n<ac:task-body>AP 3.2.1 Strukturierung durch Trennung Organisatorisch / Technisch, 4P-Approach, Kontextdefinition, Prototype-Levels + Recommended UX Design Process&nbsp;&rarr; Diskussionspr&auml;sentation auf Klausurtagung</ac:task-body>\n</ac:task>\n<ac:task>\n<ac:task-id>2</ac:task-id>\n<ac:task-status>complete</ac:task-status>\n<ac:task-body>AP 3.2.1 Einbindung der Grounded Theory und Design Thinking Methodologie auf unterer Ebene (Value) des Ansatzes</ac:task-body>\n</ac:task>\n<ac:task>\n<ac:task-id>3</ac:task-id>\n<ac:task-status>complete</ac:task-status>\n<ac:task-body>AP 3.2.3 Anleitung f&uuml;r Prototypenbau auf den verschiedenen Ebenen inkl. Beispielen</ac:task-body>\n</ac:task>\n<ac:task>\n<ac:task-id>4</ac:task-id>\n<ac:task-status>incomplete</ac:task-status>\n<ac:task-body>AP 3.2.4 Aufbereitung Event Sourcing und Command Query Responsibility Segregation f&uuml;r die Verwendung in Experimenten und DevOps, sowie fachliche Diskussion mit Unternehmensvertretern &uuml;ber den Einsatz (SICP Cloud &amp; Mobile Meeting 18.10.2017 + .NET User Group 16.01.2018)</ac:task-body>\n</ac:task>\n<ac:task>\n<ac:task-id>5</ac:task-id>\n<ac:task-status>incomplete</ac:task-status>\n<ac:task-body>AP 3.2.4 Aufbereitung Experimentieren in Softwareprojekten anhand von Netflix, sowie fachliche Diskussion mit Unternehmensvertretern (World Usability Day 09.11.2017)</ac:task-body>\n</ac:task>\n<ac:task>\n<ac:task-id>6</ac:task-id>\n<ac:task-status>incomplete</ac:task-status>\n<ac:task-body>AP 3.2.5 Masterarbeit &quot;Designing and implementing a system for passive user feedback &rarr; Aktueller Stand Anforderungen erhoben, Implementierung von Referenzarchitektur nahezu abgeschlossen; Voraussichtliches Ende M&auml;rz 2018, Evaluation mit ZenMEM Komponenten f&uuml;r Interaktionen?</ac:task-body>\n</ac:task>\n<ac:task>\n<ac:task-id>7</ac:task-id>\n<ac:task-status>incomplete</ac:task-status>\n<ac:task-body>AP 3.2.6 Rudiment&auml;res Feature Toggling System ist vorhanden, Aktuell Erweiterung und Evaluation Infrastruktur um Monitoring + Service Discovery</ac:task-body>\n</ac:task>\n</ac:task-list><p><br /></p><p><strong>Arbeitsplanung:</strong></p><p class=\"auto-cursor-target\"><br /></p><table><colgroup><col /> <col /> </colgroup><tbody><tr><td>AP 3.2.1</td><td><br /></td></tr><tr><td>Titel</td><td>Ansatz f&uuml;r Experimentieren mit evolution&auml;ren Softwaresystemen</td></tr><tr><td>Zeitraum</td><td><div class=\"content-wrapper\"><p>09/2017-12/2017, 03/2019-08/2019</p></div></td></tr><tr><td>Kurzbeschreibung</td><td>In DH-Kontexten steht nicht die Automatisierung bew&auml;hrter und wohlverstandener Routinen im Vordergrund, sondern das finden, verstehen und etablieren innovativer L&ouml;sungen. Dadurch ist Softwareentwicklung in diesem Feld immer ein Forschungsprozess, der&nbsp; durch Experimentieren begleitet werden muss. Ebenfalls ergibt sich hieraus, dass im Laufe der Zeit eine Evolution des Verst&auml;ndnisses stattfindet und so das Softwaresystem zu diskreten Zeitpunkten angepasst und erweitert werden wird. Damit ergibt sich ein evolution&auml;res Softwaresystem, aber nicht im Sinne von z. B. mutierenden Algorithmen. In diesem Arbeitspaket werden auf Basis von Literaturrecherche und den Erfahrungen aus der ersten Projektphase auf den drei ebenen People, Product und Process beschrieben wie ein Ansatz zum Experimentieren mit evolution&auml;ren Softwaresystemen gestaltet werden sollte.</td></tr><tr><td>Deliverable</td><td>Publikation, Dokumentation</td></tr><tr><td>Beteiligte</td><td>Bj&ouml;rn Senft (2 PM)</td></tr><tr><td><br /></td><td><br /></td></tr><tr><td>AP 3.2.2</td><td><br /></td></tr><tr><td>Titel</td><td>Verkn&uuml;pfung von Design Thinking mit der Softwareentwicklung</td></tr><tr><td>Zeitraum</td><td>09/2017-07/2018</td></tr><tr><td>Kurzbeschreibung</td><td>Ergebnisse des Design Thinkings sind ebenfalls wie die Ergebnisse aus der Methode in AP 3.1 nicht direkt als Anforderungen verwendbar. Bei der &Uuml;berf&uuml;hrung muss aber darauf geachtet werden, dass hilfreiche Informationen nicht verloren gehen, der Entwickler aber dennoch nicht mit Informationen &uuml;berlastet wird. Daher wird ein Konzept inklusive Templates erstellt, um die Ergebnisse f&uuml;r die Softwareentwicklung aufzuarbeiten. Dies geschieht haupts&auml;chlich &uuml;ber die Projektgruppe und deren Erfahrungen mit der &Uuml;berf&uuml;hrung, Confluence, Epics und agiler Softwareentwicklung. Verbunden ist dieses AP mit AP 3.1.3.</td></tr><tr><td>Deliverable</td><td>Konzept, Templates (Erkenntnisse aus DT Workshops, Epics, User Stories)</td></tr><tr><td>Beteiligte</td><td>Bj&ouml;rn Senft (1PM)</td></tr><tr><td><br /></td><td><br /></td></tr><tr><td>AP 3.2.3</td><td><br /></td></tr><tr><td>Titel</td><td>Experimentieren mit Prototypen</td></tr><tr><td>Zeitraum</td><td>11/2017-01/2018,08/2018-09/2018</td></tr><tr><td>Kurzbeschreibung</td><td>Eine wichtige Grundvoraussetzung f&uuml;r experimentieren mit evolution&auml;ren Softwaresystemen ist eine Experimentierfreudige Kultur. Hierf&uuml;r ist es notwendig, dass Beteiligte g&auml;ngige Verfahren kennen und schnell aneignen k&ouml;nnen, um m&ouml;glichst schnell und wenig kostenintensiv zu experimentieren. Daher wird in diesem Arbeitspaket ein Leitfaden f&uuml;r das erstellen und experimentierne mit Prototypen erstellt. Dies geschieht in Kooperation mit der Vorlesung &quot;Methoden der Entwicklung IT-basierter Gesch&auml;ftsmodelle&quot;, in der dieser Leitfaden evaluiert wird. Zus&auml;tzlich ist f&uuml;r die Edirom Summerschool ein Design Thinking Workshop angedacht, um das Experimentieren mit Prototypen zusammen mit Musikwissenschaftlern zu evaluieren.</td></tr><tr><td>Deliverable</td><td>Leitfaden Prototypen + Experimente, Beschreibung Design Thinking Workshop, Evaluationsergebnisse Vorlesung (+ DT Workshop)</td></tr><tr><td>Beteiligte</td><td>Bj&ouml;rn Senft (1PM)</td></tr><tr><td><br /></td><td><br /></td></tr><tr><td>AP 3.2.4</td><td><br /></td></tr><tr><td>Titel</td><td>Architektur evolution&auml;rer Softwaresysteme, die experimentieren unterst&uuml;tzen</td></tr><tr><td>Zeitraum</td><td>09/2017-07/2018</td></tr><tr><td>Kurzbeschreibung</td><td>Die in der ersten Projektphase entwickelte Architektur von Webservices in Containern f&uuml;r Gesch&auml;ftslogik und SPA auf Clientseite wird strukturell zu einer evolution&auml;ren Architektur erweitert. Dazu geh&ouml;rt das erm&ouml;glichen paralleler Modelle, Aufhebung von Beschr&auml;nkungen durch Technologieentscheidungen, notwendige Architekturentscheidungen, die ein benutzerspezifische online Orchestrierung von Features bzw. Alternativen erm&ouml;glicht, sowie das logging (Zustands&auml;nderungen + UI Interaktionen) unterst&uuml;tzt. Reduzierung notwendiger Auditverfahren ohne Sicherheit und Zuverl&auml;ssigkeit zu stark zu limitieren. Ergebnisse in diesem Arbeitspaket sind unter anderem die Integration von Event Sourcing und CQRS (siehe Vortrag und Erkenntnisse aus der Projektgruppe)</td></tr><tr><td>Deliverable</td><td>Anforderungskatalog f&uuml;r evolution&auml;re Softwaresysteme in Verbindung mit Experimentieren, Dokumentation der Architektur</td></tr><tr><td>Beteiligte</td><td>Bj&ouml;rn Senft (1PM)</td></tr><tr><td><br /></td><td><br /></td></tr><tr><td>AP 3.2.5</td><td><br /></td></tr><tr><td>Titel</td><td>Passive Nutzerr&uuml;ckmeldungen in evolution&auml;ren Softwaresystemen</td></tr><tr><td>Zeitraum</td><td>11/2017-05/2018</td></tr><tr><td>Kurzbeschreibung</td><td>Ein evolution&auml;res Softwaresystem bedeutet auch immer Re-Invention und Ver&auml;nderung. Daher ist es notwendig den Umgang mit dem System dauerhaft zu monitoren, um entsprechende Ver&auml;nderungen zu realisieren und darauf reagieren zu k&ouml;nnen. Um hierbei den Nutzer nicht durchg&auml;ngig zu belasten, soll dies &uuml;ber passive nutzerr&uuml;ckmeldungen realisiert werden. Die M&ouml;glichkeiten so R&uuml;ckmeldungen zu erhalten, die Integration in evolution&auml;re Softwaresysteme und die Anforderungen an die Infrastruktur f&uuml;r die Erhebung&nbsp; sowie die Auswertung inkl. erster Konzepte werden in der Masterarbeit von Janis Krasemann erarbeitet.</td></tr><tr><td>Deliverable</td><td><div class=\"content-wrapper\"><p>Masterarbeit, Publikation (vmtl. HCSE)<ac:structured-macro ac:name=\"view-file\" ac:schema-version=\"1\" ac:macro-id=\"a4be7eca-2db5-4465-a4c6-a6775380b5a1\"><ac:parameter ac:name=\"name\"><ri:attachment ri:filename=\"proposal.pdf\" /></ac:parameter><ac:parameter ac:name=\"height\">250</ac:parameter></ac:structured-macro></p></div></td></tr><tr><td>Beteiligte</td><td>Bj&ouml;rn Senft (1PM)</td></tr><tr><td><br /></td><td><br /></td></tr><tr><td>AP 3.2.6</td><td><br /></td></tr><tr><td>Titel</td><td>Benutzerspzefische Online Orchestrierung von Features</td></tr><tr><td>Zeitraum</td><td>09/2017-09/2018</td></tr><tr><td>Kurzbeschreibung</td><td>Essentiell f&uuml;r das Durchf&uuml;hren von Experimenten mit Softwaresystemen ist die automatisierte Bereitstellung und Orchestrierung f&uuml;r diejeweiligen Benutzer zur Laufzeit. F&uuml;r die externe Valdidit&auml;t des Experimentes ist ein Arbeiten unter nat&uuml;rlichen unabk&ouml;mmlich und dies l&auml;sst sich am Besten realisieren, wenn der Nutzer f&uuml;r das Experiment seine Arbeit nicht verlassen muss. Besonders da es Effekte der Re-Invention gibt, die dazuf&uuml;hren k&ouml;nnen, dass ein Experiment evtl. zu kurz ist, um entsprechende Effekte zu messen. Hierf&uuml;r muss aber sichergestellt werden, dass die Nutzer zu jeder Zeit arbeiten k&ouml;nnen und das Experiment falls es Probleme verursacht entsprechend schnell abgeschaltet werden kann ohne das Gesamtsystem zu&nbsp; beeintr&auml;chtigen. Ebenfalls ist f&uuml;r die interne Validit&auml;t wichtig, dass St&ouml;reffekte m&ouml;glichst eliminiert werden. Dies bedingt unter anderem der Bildung von Testgruppen, die auf sie angepasste Konfigurationen des Softwaresystems erhalten. Um dies zu realisieren ist eine benutzerspezifische online orchestrierung notwendig. Daher wird in diesem Arbeitspaket erarbeitet wie diese konzeptionell aussehen kann und durch Werkzeuge unterst&uuml;tzt werden. Die Ergebnisse werden hautps&auml;chlich in der Projekgruppe produziert.</td></tr><tr><td>Deliverable</td><td>Feature Toggle System, CD Pipeline, Konzept physischer + virtueller Umgebungen (Verkn&uuml;pfung Service Discovery + Feature Toggling System)</td></tr><tr><td>Beteiligte</td><td>Bj&ouml;rn Senft (1PM)</td></tr></tbody></table><p class=\"auto-cursor-target\"><br /></p><p><strong><br /></strong></p><p><br /></p>',27951187,2),
 
    
    }