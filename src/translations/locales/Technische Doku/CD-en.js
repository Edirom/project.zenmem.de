export default {
(2523152,'<p align=\"justify\">One of the software engineering approaches we planned to integrate into our project Zenmem is continuous delivery approach(CD). The need for this approach is, if any of the stakeholder of our project wants to see the application during the development phase, at any point of time, it is difficult to show them the latest running application with the current code in the repository in a production environment. The reason being the traditional software engineering approaches does not release the software frequently. The changes or the features which are implemented cannot be seen immediately or frequently in production. And also the manual process of delivering the software into production is cumbersome.</p><p align=\"justify\">Continuous Delivery enables projects to deliver new features or changes to users as fast and efficiently as possible. The goal of Continuous Delivery is to enable a constant flow of changes into production via an automated delivery pipeline. This pipeline is an automated implementation of the software\'s build, deploy, test and release processes. The Continuous Delivery pipeline breaks down the above processes as stages. Each stage is aimed at verifying the quality of new features or changes from a different angle to validate the new functionality and prevent errors from affecting the users. The pipeline provides feedback and visibility into the flow of changes as early in the process as possible to everyone involved in delivering the new feature/s. Getting the continuous delivery pipeline working takes effort, but after benefits are profound.</p><p align=\"justify\">&nbsp;</p><p align=\"justify\"><ac:image ac:height=\"250\"><ri:attachment ri:filename=\"Screenshot from 2015-11-13 16_24_35.png\" /></ac:image></p><p align=\"justify\">&nbsp;</p><p align=\"justify\">The sample continuous delivery pipeline can be seen in above figure. The way it works is as follows. Every change or commit made to the git repository, triggers the creation of a new instance of the pipeline. This instance triggers the build operations of the application and the feedback is generated. If the build succeeds, then it triggers static code analysis and produces the report at the same time. Then it triggers the configured tests and if all the tests pass then it deploy the application into the production environment. CD helps to overcome the complex and manually intensive release process.</p><p align=\"justify\"><u><strong>Tools used:</strong></u></p><p align=\"justify\">In order to implement the continuous delivery pipeline following tools have been used.</p><p align=\"justify\">1) Git: Git is used as the version control system and Gitlab is used as the git manager. When we push the application source code from the local git repository to remote repository, Jenkins runs the jobs required to build and test our application. If all jobs pass, it deploys the application to the production environment.</p><p align=\"justify\">2) Jenkins: Jenkins is an open source tool to perform continuous delivery. The basic functionality of Jenkins is to execute a predefined list of jobs based on a certain trigger. The trigger might for example be a change or commit to git, or a successful job might trigger another job.</p><p align=\"justify\">The list of jobs for example may include:</p><p align=\"justify\">a) Perform a build of application with sbt.</p><p align=\"justify\">b) Run the static code analysis</p><p align=\"justify\">c) Deploy the application</p><p align=\"justify\">Jenkins also monitors the execution of the jobs and allows to stop the process if one of the jobs fails. Jenkins allows to notify users about the build success or failure. It is easy to use and offers various plugins for integration with other tools.</p><p align=\"justify\">3) Sonarqube: It is an open source application to manage code quality. SonarQube is a web based application and it allows to configure the rules, thresholds and settings. In this continuous delivery pipeline setup, the sonar tests are executed with every successful build. With the execution of sonar analysis the developers receive the reports of code quality.</p><p align=\"justify\">4) Puppet : It is an open source application deployment and provisioning tool. It has good support and is therefore chosen from the available tools.</p><p align=\"justify\"><u><strong>Implementaion</strong></u>:</p><p align=\"justify\"><a name=\"ci_jenkins_plugins\"></a> The implementation of continuous delivery pipeline is carried out in cloud environment for scalability and resource management benefits. Everything is running on Vmware virtual machines and opensource tools. We are using 5 virtual machines for this delivery pipeline.</p><p>&nbsp;</p><table><colgroup><col /> <col /> <col /> </colgroup><tbody><tr><td><p><strong>IP </strong></p></td><td><p><strong>MAC</strong></p></td><td><p><strong>Hostname</strong></p></td></tr><tr><td><p>131.234.166.118</p></td><td><p>0050.56aa.3de6</p></td><td><p>han</p></td></tr><tr><td><p>131.234.166.119</p></td><td><p>0050.56aa.6442</p></td><td><p>kajam</p></td></tr><tr><td><p>131.234.166.120</p></td><td><p>0050.56aa.4a0b</p></td><td><p>peacock</p></td></tr><tr><td><p>131.234.166.121</p></td><td><p>0050.56aa.4e21</p></td><td><p>kastra</p></td></tr><tr><td><p>131.234.142.171</p></td><td><p>0050.56aa.21f3</p></td><td><p>nashira</p></td></tr></tbody></table><p>We installed Debian jessie on the machines and provided SSH login for the machines.</p><p>Jenkins is running on the virtual machine <strong>peacock </strong><span>and can be accessed at the url :</span></p><p><a href=\"https://peacock.uni-paderborn.de:8083/\"><span>http://peacock.uni-paderborn.de:8083/</span></a></p><p><span>Gitlab is also on the same machine </span><strong>peacock </strong><span>and can be accessed at the url :</span></p><p><a href=\"https://peacock.uni-paderborn.de:8083/\"><span>http://peacock.uni-paderborn.de:8080/</span></a></p><p align=\"justify\">SonarQube is installed on the machine <strong>kajam</strong> and its database Mysql is installed on <strong>han</strong> and can be accessed at the url :</p><p align=\"justify\"><a href=\"http://kajam.uni-paderborn.de:9000/\">http://kajam.uni-paderborn.de:9000/</a></p><p align=\"justify\">Play framework is installed on <strong>kastra</strong>.</p><p>&nbsp;</p>',2490386,2),
};