export default {
(17661955,'<ac:layout><ac:layout-section ac:type=\"two_equal\"><ac:layout-cell><h1>Play! Framework Introduction</h1><p><span>Play! Framework essentially makes it easy to build web applications with Java and&nbsp;</span><a class=\"external-link\" href=\"http://www.scala-lang.org/\" rel=\"nofollow\">scala</a><span>.&nbsp;<span>Play! is a perfect companion to&nbsp;</span>agile software development<span>.</span></span></p><p><span><br /></span></p><p>&nbsp;</p></ac:layout-cell><ac:layout-cell><h3>What are the key features of Play! Framework?&nbsp;</h3><ul><li><span>Play! Framework makes it easy to build modern and powerful Web and Mobile applications.</span></li><li>Play! is based on&nbsp;Hot reload for&nbsp;all Java code, templates, config changes, etc, a simple refresh in a web browser will make your changes visible.<span><br /></span></li><li><span>Play! provides predictable and minimal resource consumption (CPU, memory, threads) for highly scalable applications.</span><br /><span><br /></span></li></ul></ac:layout-cell></ac:layout-section><ac:layout-section ac:type=\"single\"><ac:layout-cell><h1>Dive more into technicality!</h1><h3>Technically lucrative features of Play!:&nbsp;</h3><ul><li><p><span style=\"color: rgb(34,34,34);\"><em><strong>Open Source:</strong></em> Play! is open source which means you can see how everything works inside Play and even suggest any changes if you need to change something. There are huge number of plugins contributed by users.&nbsp;</span></p></li><li><span style=\"color: rgb(34,34,34);\"><strong><em>Fullstack</em>:</strong> Play! comes with everything one needs to develop a web application: a compiler, a web server, in memory db server, offline documentation, integrated database manager, local and distributed cache management, fixtures, evolutions, dependency management, lots of utility libraries, unit tests, selenium tests, ide support etc.. [3]</span></li><li><span><span style=\"color: rgb(34,34,34);\"><em><strong>Intuitive error reporting:</strong></em> For both compile and runtime errors, Play! shows the error message, the file path, line number, and relevant</span><span style=\"color: rgb(34,34,34);\">&nbsp;code snippet&nbsp;</span><em>right in the browser</em><span style=\"color: rgb(34,34,34);\">. No more digging through random log files (Tomcat) and far fewer incomprehensible, gigantic stack traces (Spring)</span><span style=\"color: rgb(34,34,34);\">.&nbsp;[2]</span></span></li><li><span><span style=\"color: rgb(34,34,34);\"><em><strong>Contemporary:</strong></em> Play! has built-in support for most tasks you\'d need in a modern web framework: REST, JSON/XML handling, non-blocking I/O, WebSockets, asset compilation (CoffeeScript, less), ORM, NoSQL support, and so on. (<strong>Todo</strong>: more basic level explanation&nbsp;needed)&nbsp;[3]</span></span></li><li><p><em><strong>Ready-to-develop:</strong></em> Zero development environment setup: just unzip play.zip, play new myapp, play run myapp! (Todo: check personally)&nbsp;[3]&nbsp;</p></li></ul><h3>And some more!..</h3><ul><li><em><strong>Play Jobs:&nbsp;</strong></em>Because Play! is a web application framework, most of the application logic is done by controllers (a component in MVC architecture) responding to HTTP requests.&nbsp;<span style=\"color: rgb(0,0,0);\">Play! framework jobs provide a way of running program logic &ldquo;in the background&rdquo;. Play! will take care of the lifecycle and the timings.&nbsp;<span>Jobs are fully managed by the framework. That means that Play will manage all the database connection stuff, JPA entity manager synchronization and transactions management for you.&nbsp;</span>[4]</span></li><li><em><strong>Templating:&nbsp;</strong></em>Play has an efficient <a class=\"external-link\" href=\"https://www.google.de/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=what+is+templating\" rel=\"nofollow\">templating</a> system which allows to dynamically generate HTML, XML, JSON or any text-based formatted document.&nbsp;<span style=\"color: rgb(0,0,0);\">This all comes with great error messages, even for the templating code. You can quickly tell where you&rsquo;ve made a mistake.&nbsp;</span></li><li><em><strong>URL mappings and redirects:&nbsp;</strong></em><span style=\"color: rgb(0,0,0);\">controllers in Play! contain a lot of static methods that adhere to the URLs of your application. For example, if one needs to show something for a URL&nbsp;</span><code>/contacts/list</code><span style=\"color: rgb(0,0,0);\">&nbsp;he would implement a method&nbsp;</span><code>list</code><span style=\"color: rgb(0,0,0);\">&nbsp;in a controller contacts.</span></li><li><em><strong>Testing: </strong></em>Play!&nbsp;<span><span style=\"color: rgb(0,0,0);\">comes bundled with a slick interface to run unit, functional and selenium tests against our app.&nbsp;Play! gives us a way to test directly the controller part of the application using JUnit&nbsp;referred to as&nbsp;</span>\'Functional tests\' as the&nbsp;<span style=\"color: rgb(0,0,0);\">complete functionality of the web application is tested.&nbsp;<a class=\"external-link\" href=\"http://seleniumhq.org/\" rel=\"nofollow\">Selenium</a><span>&nbsp;is a testing tool specifically for testing web applications. Selenium allows to run the test suite directly in any existing browser. As it does not use any &lsquo;browser simulator&rsquo;, we can be sure that we are testing what our users will use.&nbsp;<span>A selenium test suite is typically written as an HTML file, P<span>lay! helps generate it using the Play template engine and a set of tags that support a simplified syntax for selenium scenarios.</span></span></span></span></span></li></ul></ac:layout-cell></ac:layout-section><ac:layout-section ac:type=\"single\"><ac:layout-cell><h1>Disadvantages of Play! Framework&nbsp;</h1><p>(These disadvantages are collected by reading multiple blogs, online sites etc. and only those which are found repeatedly are included here, as I myself have no experience of using Play!)</p><ul><li><span>Play! do not offer backward compatibility. For example, Play 2 is not compatible with Play 1. So, if you are planning to migrate to an existing app, you have to do all the tasks once again.</span></li><li><span><em><strong>Tradeoff between Java and Scala: </strong></em>Java developers need to learn Scala. <span>Scala\'s compiler is significantly slower than Java, so hot reload takes longer.&nbsp;<span>Scala is a relatively new language, so not as many developers know it; it also has a steep learning curve, even for Java experts, so getting started can be tough. Few people&nbsp;<span style=\"color: rgb(81,81,81);\">noticed that form field validation actually behaves differently in Scala and Java versions (different error messages and Java version does not provides all the validations Scala version does) etc.</span></span></span></span></li><li><span><span>Lots of existing code in the Java world is built around HttpServletRequest, HttpServletResponse, etc. Play uses none of these, so you need to find other libraries or create wrappers.</span></span></li><li><span><span><span>SBT is Play\'s build system: it\'s powerful, flexible, and provides support for some of Play\'s best features (hot reload, interactive console, ability to debug the build and share code w/ runtime, and more). Unfortunately, SBT is written in a way that\'s hard to understand even for Scala experts.</span></span></span></li><li><span><span><span>Play! does not produce WAR. Although&nbsp;<span>Play2War exists, it has problems.</span></span></span></span></li><li>Application Startup Time Grows with Application Size</li><li><span>There are lots of&nbsp;</span>plugins<span>&nbsp;but they are not stable.</span></li><li><span><span>&nbsp;<span style=\"color: rgb(81,81,81);\">Poor documentation.</span></span></span></li></ul></ac:layout-cell></ac:layout-section><ac:layout-section ac:type=\"single\"><ac:layout-cell><h1>AngularJS Introduction<br />&nbsp;</h1><p><strong>AngularJS</strong><span style=\"color: rgb(37,37,37);\">&nbsp;</span><span style=\"color: rgb(37,37,37);\">is an&nbsp;</span>open-source<span style=\"color: rgb(37,37,37);\">&nbsp;</span>web application framework<span style=\"color: rgb(37,37,37);\">&nbsp;maintained by&nbsp;</span>Google<span style=\"color: rgb(37,37,37);\">&nbsp;which helps develop&nbsp;</span><a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Single-page_application\" rel=\"nofollow\" title=\"Single-page application\">single-page applications</a><span style=\"color: rgb(37,37,37);\">. It lets us extend HTML\'S syntax so that we can express our application components with more accuracy, with the help of minimum code. AngularJS does everything within the browser so that it can go hand in hand with any server side technology simply by teaching the browser a new syntax. AngularJS is a complete client side solution which provides everything we need to build <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\" rel=\"nofollow\">CRUD</a>, test scripts for unit and end-to-end testing.&nbsp;[5]</span></p><p>&nbsp;</p><ul><li><p style=\"text-align: justify;\">Applications written in AngularJS are cross-browser compliant. AngularJS automatically handles javascript code suitable for each browser.&nbsp;[6]<span style=\"color: rgb(37,37,37);\"><br class=\"_mce_tagged_br\" /></span></p></li></ul><p>&nbsp;</p></ac:layout-cell></ac:layout-section><ac:layout-section ac:type=\"two_equal\"><ac:layout-cell><h1>Features of AngularJS: technical overview.</h1><ul><li><p><em><strong>Templates:&nbsp;</strong></em><span style=\"color: rgb(0,0,0);\">These are the rendered view with information from the controller and model. These can be a single HTML file.</span></p></li><li><p><em><strong>Deep-Linking:</strong></em><span style=\"color: rgb(0,0,0);\">&nbsp;</span><span style=\"color: rgb(0,0,0);\">Deep linking allows us to encode the state of application in the URL so that it can be bookmarked. The application can then be restored from the URL to the same state.</span><span style=\"color: rgb(0,0,0);\">&nbsp;</span></p></li><li><p><em><strong>Directives:</strong></em><span style=\"color: rgb(0,0,0);\">&nbsp;</span><span style=\"color: rgb(0,0,0);\">These can be used to create custom HTML tags that serve as new, custom widgets. AngularJS has built-in directives.</span></p></li><li><p><em><strong>Controller:</strong></em><span style=\"color: rgb(0,0,0);\">&nbsp;Controllers contain business logic needed for a single view. They are typically&nbsp;</span><span><span style=\"color: rgb(0,0,0);\"><span>Javascript functions that are bound to a particular scope (i.e. object that&nbsp;</span><span>refers</span><span>&nbsp;to the Model).&nbsp;In&nbsp;general, a Controller&nbsp;</span><span>shouldn\'t</span><span>&nbsp;try to do so much</span></span></span><span style=\"color: rgb(0,0,0);\">.&nbsp;</span><span style=\"color: rgb(0,0,0);\">The most common way to keep Controllers slim is by encapsulating work that doesn\'t belong to controllers into services and then using these services in Controllers via <a class=\"external-link\" href=\"https://docs.angularjs.org/guide/di\" rel=\"nofollow\">dependency injection</a>.</span></p></li><li><p><em><strong>Scope:</strong></em><span style=\"color: rgb(0,0,0);\">Scope are objects that refer to the model. They act as a glue between controller and view.</span></p></li><li><p><em><strong>Data-Binding:&nbsp;</strong></em><span>Data between Model and View is synchronised automatically using Data-binding feature of AngularJS</span></p></li><li><p><span style=\"color: rgb(0,0,0);\"><span><em><strong>Filters:</strong></em>&nbsp;<span>These select a subset of items from an array and returns a new array.</span></span></span></p></li></ul><p><span style=\"color: rgb(0,0,0);\"><span><span><br /></span></span></span></p><ul><li><p>AngularJS follows <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\" rel=\"nofollow\">MVC </a>(Model-view-Controller) style of development, <em>Model </em>represents current state of the application, <em>View</em> displays data and <em>Controller</em> controls the relation between Model and the View.</p></li><ul><li><p><span style=\"color: rgb(0,0,0);\">A <em>Model</em> in angular can be a primitive type such as string, number, boolean or a complex type such as object. I<span style=\"color: rgb(68,68,68);\">t can be dynamic data which you can get from a database like MySQL or from static JSON file.&nbsp;</span></span></p></li><li><p><span style=\"color: rgb(0,0,0);\"><span style=\"color: rgb(68,68,68);\"><em>View</em> displays the data. It uses double curly brackets.</span></span></p></li><li><p><em>Controller</em><span style=\"color: rgb(68,68,68);\">&nbsp;</span><span style=\"color: rgb(68,68,68);\">controls how data is retrieved and displayed to end-user, so we wrap <em>Model&nbsp;</em>that is data inside this <em>Controller</em></span></p></li></ul></ul></ac:layout-cell><ac:layout-cell><p>&nbsp;</p><p><strong><br /></strong></p><ac:structured-macro ac:name=\"code\"><ac:parameter ac:name=\"title\">AngularJS Model</ac:parameter><ac:plain-text-body><![CDATA[<script>\n    $scope.meal =  {\n         \'breakfast\'   :   \'Orange Juice\',\n         \'Lunch\'       :   \'Fruit Salad\',\n         \'Dinner\'      :   \'Vegetable Rice\'\n     }\n</script>\n\n]]></ac:plain-text-body></ac:structured-macro><p><strong><br /></strong></p><p>&nbsp;</p><p>&nbsp;</p><ac:structured-macro ac:name=\"code\"><ac:parameter ac:name=\"title\">AngularJS View</ac:parameter><ac:plain-text-body><![CDATA[<h1> {{meal.breakfast}} </h1>]]></ac:plain-text-body></ac:structured-macro><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p><strong><br /></strong></p><ac:structured-macro ac:name=\"code\"><ac:parameter ac:name=\"title\">AngularJS Controller</ac:parameter><ac:plain-text-body><![CDATA[function food($scope){\n  \n}]]></ac:plain-text-body></ac:structured-macro><p>&nbsp;</p><p>&nbsp;</p></ac:layout-cell></ac:layout-section><ac:layout-section ac:type=\"single\"><ac:layout-cell><h1><span style=\"color: rgb(37,37,37);\">&nbsp; </span>AngularJS Disadvantages</h1><ul><li><em><strong>Security:&nbsp;</strong></em><span style=\"color: rgb(0,0,0);\">Being JavaScript only framework, application written in AngularJS are not safe. Server side authentication and authorization is must to keep an application secure.</span></li><li><p style=\"text-align: justify;\"><strong><em>Not Degradable:</em></strong>&nbsp;If your application user disables Javascript then user will just see the basic page and nothing more.<span style=\"color: rgb(0,0,0);\"><br /></span></p></li></ul></ac:layout-cell></ac:layout-section><ac:layout-section ac:type=\"single\"><ac:layout-cell><h1>References</h1><p>[1] <a class=\"external-link\" href=\"https://www.playframework.com/\" rel=\"nofollow\">https://www.playframework.com/</a></p><p>[2]&nbsp;<a class=\"external-link\" href=\"http://www.quora.com/What-are-the-pros-and-cons-of-the-Play-Framework-2-for-a-Java-developer\" rel=\"nofollow\">http://www.quora.com/What-are-the-pros-and-cons-of-the-Play-Framework-2-for-a-Java-developer#</a>&nbsp;(Check and remove!)</p><p>[3]&nbsp;<a class=\"external-link\" href=\"http://stackoverflow.com/questions/7447452/advantages-of-play-framework-for-people-coming-from-php-ruby-python\" rel=\"nofollow\">http://stackoverflow.com/questions/7447452/advantages-of-play-framework-for-people-coming-from-php-ruby-python</a>&nbsp;(Check and remove!)</p><p>[4]&nbsp;<a class=\"external-link\" href=\"http://zeroturnaround.com/rebellabs/my-top-5-play-framework-features/\" rel=\"nofollow\">http://zeroturnaround.com/rebellabs/my-top-5-play-framework-features/</a>&nbsp;(Check and remove!)</p><p>[5]&nbsp;<a class=\"external-link\" href=\"https://docs.angularjs.org/guide/introduction\" rel=\"nofollow\">https://docs.angularjs.org/guide/introduction</a></p><p>[6]&nbsp;<a href=\"http://www.tutorialspoint.com/angularjs/angularjs_overview.htm\" rel=\"nofollow\">http://www.tutorialspoint.com/angularjs/angularjs_overview.htm</a></p></ac:layout-cell></ac:layout-section></ac:layout>',17629187,2),
    };