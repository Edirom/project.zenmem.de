    export default {
    
    (2523382,'<p>In order to be able to consume MEI data LilyPond has to be enabled to engrave scores from XML data in general. The task is to parse an XML DOM and map this to a Scheme representation that can be fed into LilyPond\'s rendering engine.</p><p>Generally LilyPond\'s compilation proceeds in two subsequent stages: the parsing and the engraving. First the complete document is parsed and processed to some internal representation (albeit there\'s not a single moment with a single hierarchical data structure), which is then used as input for the rendering stage. The idea of <code>mei2ly</code> is to prepare such a structure, but not from LilyPond input files but from XML.</p><table><tbody><tr><td style=\"text-align: right;\"><strong>Type:</strong></td><td style=\"text-align: left;\">Fundamentals</td></tr><tr><td style=\"text-align: right;\"><strong>Complexity:</strong></td><td style=\"text-align: left;\">Unclear, <em>may</em> be easy</td></tr><tr><td style=\"text-align: right;\"><strong>Technology:</strong></td><td style=\"text-align: left;\">Scheme, (possibly C++)</td></tr><tr><td style=\"text-align: right;\"><strong>Dependencies:</strong></td><td style=\"text-align: left;\">Guile 2</td></tr><tr><td colspan=\"1\" style=\"text-align: right;\"><strong>State:</strong></td><td colspan=\"1\" style=\"text-align: left;\">--</td></tr></tbody></table><p style=\"text-align: right;\"><ac:link><ri:page ri:content-title=\"1.1.1 Update LilyPond to Guile v2\" /><ac:plain-text-link-body><![CDATA[<= Back]]></ac:plain-text-link-body></ac:link> || <ac:link><ri:page ri:content-title=\"1.1 Data Structures/Formats\" /><ac:plain-text-link-body><![CDATA[Up]]></ac:plain-text-link-body></ac:link> || <ac:link><ri:page ri:content-title=\"1.1.3 Convert MEI to a Suitable XML representation\" /><ac:plain-text-link-body><![CDATA[Next =>]]></ac:plain-text-link-body></ac:link></p><p style=\"text-align: right;\">&nbsp;</p><hr /><ac:task-list>\n<ac:task>\n<ac:task-id>4</ac:task-id>\n<ac:task-status>incomplete</ac:task-status>\n<ac:task-body><span>Read XML to SXML (Scheme\'s XML representation)</span></ac:task-body>\n</ac:task>\n<ac:task>\n<ac:task-id>5</ac:task-id>\n<ac:task-status>incomplete</ac:task-status>\n<ac:task-body><span>Convert this SXML to a Scheme object that can be fed into a <code>(make-music)</code> call</span></ac:task-body>\n</ac:task>\n<ac:task>\n<ac:task-id>6</ac:task-id>\n<ac:task-status>incomplete</ac:task-status>\n<ac:task-body><span>Infrastructure to actually do the above and have LilyPond process it</span></ac:task-body>\n</ac:task>\n</ac:task-list>\n<p style=\"text-align: left;\"><span>It is not clear whether this should be added to LilyPond itself or if it is better suited as an openLilyLib package. In any case development should be done in openLilyLib.<br /></span></p>',2490774,2),

    
    }