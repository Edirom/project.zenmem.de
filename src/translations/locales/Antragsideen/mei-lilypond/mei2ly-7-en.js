    export default {
    
    (2523303,'<p>While the explicit goal is to have LilyPond engrave MEI data directly there still are use cases where a <em>conversion</em> to LilyPond input files is important. While breaking the link to the original data this makes it possible to process contents in the LilyPond domain in arbitrary ways that would otherwise have to be supported explicitly by the tools implemented in <code>mei2ly</code>.</p><p>Once LilyPond is able to convert XML to an internal representation (as per <ac:link><ri:page ri:content-title=\"1.1.2 Let LilyPond Compile XML Data\" /></ac:link>) it should also be able to write this back to working LilyPond files. So this will deliver a complete MEI-to-LilyPond converter as a cheap &ldquo;by-product&rdquo;.</p><table><tbody><tr><td style=\"text-align: right;\"><strong>Type:</strong></td><td>File converter (optional module)</td></tr><tr><td style=\"text-align: right;\"><strong>Complexity:</strong></td><td>Easy (probably)<br />Basically it should be sufficient to integrate functionality that is already available in LilyPond</td></tr><tr><td style=\"text-align: right;\"><strong>Technologies:</strong></td><td>Scheme</td></tr><tr><td style=\"text-align: right;\"><strong>Dependencies:</strong></td><td><ac:link><ri:page ri:content-title=\"1.1.2 Let LilyPond Compile XML Data\" /></ac:link></td></tr><tr><td style=\"text-align: right;\"><strong>State:</strong></td><td>--</td></tr></tbody></table><p style=\"text-align: right;\"><ac:link><ri:page ri:content-title=\"1.1.3 Convert MEI to a Suitable XML representation\" /><ac:plain-text-link-body><![CDATA[<= Back]]></ac:plain-text-link-body></ac:link> || <ac:link><ri:page ri:content-title=\"1.1 Data Structures/Formats\" /><ac:plain-text-link-body><![CDATA[Up]]></ac:plain-text-link-body></ac:link> || <ac:link><ri:page ri:content-title=\"1.1.5 Let LilyPond Write MEI file\" /><ac:plain-text-link-body><![CDATA[Next =>]]></ac:plain-text-link-body></ac:link></p>',2490680,2),

    
    }