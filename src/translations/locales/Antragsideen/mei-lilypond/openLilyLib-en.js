    export default {
    
    (2523315,'<p>openLilyLib is a LilyPond library infrastructure that will provide the &ldquo;glue&rdquo; between processed MEI data and LilyPond\'s rendering engine. Basically it is a module of Scheme code that can be loaded from within a LilyPond document and that provides a common infrastructure and common functionality for arbitrary libraries. Loading MEI data into LilyPond will presumably take place within such an openLilyLib library.</p><p>openLilyLib is currently being redesigned (together with the edition-engraver), and it is quite possible that this will be completely achieved by the LilyPond community. However, it is possible that there will be work left once the <code>mei2ly</code> project starts.</p><table><tbody><tr><td style=\"text-align: right;\"><strong>Type:</strong></td><td>core functionality</td></tr><tr><td style=\"text-align: right;\"><strong>Complexity:</strong></td><td>Medium</td></tr><tr><td style=\"text-align: right;\"><strong>Technology:</strong></td><td>Scheme</td></tr><tr><td style=\"text-align: right;\"><strong>Dependencies:</strong></td><td>None</td></tr><tr><td style=\"text-align: right;\"><strong>State:</strong></td><td><p>This is already under active development. Maybe <code>mei2ly</code> won\'t have any extra work with this.<br />However, a number of <code>mei2ly</code>\'s own development will take place in in the openLilyLib context.</p></td></tr></tbody></table><p style=\"text-align: right;\"><ac:link><ri:page ri:content-title=\"2.1.2 &ldquo;edition-engraver&ldquo;\" /><ac:plain-text-link-body><![CDATA[<= Back]]></ac:plain-text-link-body></ac:link> || <ac:link><ri:page ri:content-title=\"2.1 Requirements\" /><ac:plain-text-link-body><![CDATA[Up]]></ac:plain-text-link-body></ac:link> || <ac:link><ri:page ri:content-title=\"2.1.4 Extract Partials / Readings from MEI\" /><ac:plain-text-link-body><![CDATA[Next =>]]></ac:plain-text-link-body></ac:link></p>',2490700,2),

    
    }